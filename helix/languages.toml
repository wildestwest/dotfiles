# You have to install the LSPs yourself, just google them, they are all pretty easy.
# Helix will automagically detect and configure these LSPs for the langauges I use at least, they just have to be on your path, see https://docs.helix-editor.com/lang-support.html for more:
# pip install -U jedi-language-server
# cargo install taplo-cli --locked
# npm install -g @ansible/ansible-language-server
# rustup component add rust-analyzer OR brew install rust-analyzer
# npm install --save vscode-json-languageservice
# brew install helm-ls
# npm install --global yaml-language-server
# go install golang.org/x/tools/gopls@latest
# brew install golangci-lint
# npm install -g dockerfile-language-server-nodejs
# npm i -g bash-language-server
# $ cargo install --git https://github.com/estin/simple-completion-language-server.git


# introduce new language server, this is just here to hack in snippet support for now while a builtin solution is getting worked by the helix devs.
[language-server.scls]
command = "simple-completion-language-server"

[language-server.scls.config]
max_completion_items = 100           # set max completion results len for each group: words, snippets, unicode-input
feature_words = true                 # enable completion by word
feature_snippets = true              # enable snippets
snippets_first = true                # completions will return before snippets by default
snippets_inline_by_word_tail = false # suggest snippets by WORD tail, for example text `xsq|` become `x^2|` when snippet `sq` has body `^2`
feature_unicode_input = false        # enable "unicode input"
feature_paths = false                # enable path completion
feature_citations = false            # enable citation completion (only on `citation` feature enabled)

# write logs to /tmp/completion.log
[language-server.scls.environment]
RUST_LOG = "info,simple-completion-language-server=info"
LOG_FILE = "/tmp/completion.log"

[[language]]
name = "python"
language-servers = ["scls", "basedpyright", "ruff"]

# append language server to existed languages
[[language]]
name = "rust"
language-servers = [ "scls", "rust-analyzer" ]

# introduce a new language to enable completion on any doc by forcing set language with :set-language stub
[[language]]
name = "stub"
scope = "text.stub"
file-types = []
shebangs = []
roots = []
auto-format = false
language-servers = [ "scls" ]

[language-server.basedpyright]
command = "basedpyright-langserver"
args = ["--stdio"]
except-features = ["format", "code-action"]

[language-server.basedpyright.config.basedpyright.analysis]
autoSearchPaths = true
typeCheckingMode = "basic"
diagnosticMode = "openFilesOnly"

[language-server.ruff]
command = "ruff"
args = ["server", "--preview"]
